@namespace KeyboardSharp
@inject KeyboardService KeyboardService

@*<div style="display: inline-flex;">*@
    <div class="typed-values">
        @if (TypedValues.Count > 0)
        {
            foreach (var val in TypedValues)
            {
                <div class="value">@val</div>
            }
        }
        else
        {
            <div class="value"> </div>
        }
    </div>
    @*<div style="display: inline-block; padding-left: 20px;">
        <button class="btn btn-outline-dark btn-lg" @onclick="Clear">Clear</button>
    </div>*@
@*</div>*@

@code {
    private const int MaxValues = 30;

    private LinkedList<string> TypedValues { get; set; } = new LinkedList<string>();

    private bool ShouldDisplay(string value) =>
        value?.Length > 1 ? false : true;

    public void OnKeyDown(KeyboardEventArgs args)
    {
        if (ShouldDisplay(args.Key))
        {
            TypedValues.AddFirst(args.Key);
            if (TypedValues.Count > MaxValues)
                TypedValues.RemoveLast();
            StateHasChanged();
        }
    }

    public void OnKeyUp(KeyboardEventArgs args)
    {

    }

    private void Clear()
    {
        TypedValues.Clear();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        KeyboardService.KeyDown += OnKeyDown;
        KeyboardService.KeyUp += OnKeyUp;
    }
}

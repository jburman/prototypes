@inject KeyboardService Keyboard

<div class="keyboard-key @KeySizeClass()"
     style="background-color: @(BgColor); @((IsAnchorKey ? "text-decoration: underline; font-weight: bold;" : ""))">
    @if (ShowAltValue && AltValue != null)
    {
        @AltValue
    }
    else
    {
        @Value
    }
</div>
@code 
{
    [Parameter]
    public KeySize KeySize { get; set; } = KeySize.Default;
    [Parameter]
    public bool IsAnchorKey { get; set; } = false;
    [Parameter]
    public bool IsPlaceHolder { get; set; } = false;
    [Parameter]
    public string DefaultBGColor { get; set; } = "#ffffff";
    [Parameter]
    public string HighlightColor { get; set; } = "yellow";

    [CascadingParameter]
    public bool ShowAltValue { get; set; } = false;

    private string BgColor;

    [Parameter]
    public string Value { get; set; }
    [Parameter]
    public string AltValue { get; set; }
    [Parameter]
    public string KeyCode { get; set; } = null;

    private string KeySizeClass() =>
        KeySize switch
        {
            KeySize.Wide => "key wide",
            KeySize.XWide => "key x-wide",
            _ => "key"
        };

    private bool IsHighlighted(KeyboardEventArgs args) => (KeyCode, Value, AltValue) switch
    {
        var (keyCode, _, _) when keyCode != null && args.Code.Equals(keyCode, StringComparison.OrdinalIgnoreCase) => true,
        var (_, value, _) when KeyCode is null && args.Key.Equals(value) => true,
        var (_, _, altValue) when KeyCode is null && ShowAltValue && args.Key.Equals(altValue) => true,
        _ => false
    };

    public void OnKeyDown(KeyboardEventArgs args)
    {
        if (!args.Repeat)
        {
            if (IsHighlighted(args) && BgColor != HighlightColor)
            {
                BgColor = HighlightColor;
                StateHasChanged();
            }
        }
    }

    public void OnKeyUp(KeyboardEventArgs args)
    {
        if (IsHighlighted(args) && BgColor != DefaultBGColor)
        {
            BgColor = DefaultBGColor;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        BgColor = DefaultBGColor;

        if (!IsPlaceHolder)
        {
            Keyboard.KeyDown += OnKeyDown;
            Keyboard.KeyUp += OnKeyUp;
        }
    }
}
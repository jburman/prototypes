@namespace KeyboardSharp
@inject KeyboardService Keyboard

<div class="keyboard-key @KeySizeClass() @KeyColorClass() @(IsPressed ? "pressed" : string.Empty) @(IsEnabled ? string.Empty : "disabled")"
     style="@((IsAnchorKey ? "text-decoration: underline; font-weight: bold;" : ""))">
    @if (ShowAltValue && AltValue != null)
    {
        @AltValue
    }
    else
    {
        @Value
    }
    @if(Finger != null && KeyFilter?.IsFingerLabelEnabled(Finger) == true && KeyFilter?.IsFingerLabelKeyEnabled(Value) == true)
    {
        <div class="key-label key-finger-@Finger">@Finger</div>
    }
</div>
@code 
{
    [Parameter]
    public KeySize KeySize { get; set; } = KeySize.Default;
    [Parameter]
    public bool IsAnchorKey { get; set; } = false;
    [Parameter]
    public bool IsAltHand { get; set; } = false;
    [Parameter]
    public bool IsPlaceHolder { get; set; } = false;
    //[Parameter]
    //public string HighlightColor { get; set; } = "yellow";
    [Parameter]
    public string Finger { get; set; } = null;

    [CascadingParameter]
    public bool ShowAltValue { get; set; } = false;
    [CascadingParameter]
    public IKeyFilter KeyFilter { get; set; } = null;

    //private string BgColor;
    private bool IsPressed = false;

    [Parameter]
    public string Value { get; set; }
    [Parameter]
    public string AltValue { get; set; }
    [Parameter]
    public string KeyCode { get; set; } = null;

    private string KeySizeClass() =>
        KeySize switch
        {
            KeySize.Wide => "key wide",
            KeySize.XWide => "key x-wide",
            _ => "key"
        };

    private string KeyColorClass() =>
        (IsAltHand, IsAnchorKey) switch
        {
            (true, true) => "alt-hand anchor-finger",
            (false, true) => "anchor-finger",
            (true, _) => "alt-hand",
            _ => string.Empty
        };

    private bool IsHighlighted(KeyboardEventArgs args) => (KeyCode, Value, AltValue) switch
    {
        var (keyCode, _, _) when keyCode != null && args.Code.Equals(keyCode, StringComparison.OrdinalIgnoreCase) => true,
        var (_, value, _) when KeyCode is null && args.Key.Equals(value) => true,
        var (_, _, altValue) when KeyCode is null && ShowAltValue && args.Key.Equals(altValue) => true,
        _ => false
    };

    private bool IsEnabled => (KeyFilter, ShowAltValue) switch
    {
        var (keyFilter, _) when keyFilter is null => true,
        var (keyFilter, altValue) when altValue is true => keyFilter.IsKeyEnabled(AltValue),
        var (keyFilter, altValue) when altValue is false => keyFilter.IsKeyEnabled(Value),
        (_, _) => true
    };

    public void OnKeyDown(KeyboardEventArgs args)
    {
        if (!args.Repeat && IsEnabled)
        {
            if (IsHighlighted(args) && !IsPressed)
            {
                //BgColor = HighlightColor;
                IsPressed = true;
                StateHasChanged();
            }
        }
    }

    public void OnKeyUp(KeyboardEventArgs args)
    {
        if (IsEnabled)
        {
            if (IsHighlighted(args) && IsPressed)
            {
                //BgColor = DefaultBGColor;
                IsPressed = false;
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        //BgColor = DefaultBGColor;

        if (!IsPlaceHolder)
        {
            Keyboard.KeyDown += OnKeyDown;
            Keyboard.KeyUp += OnKeyUp;
        }
    }
}